
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1.parserLexer.parser;

import com.example.practica1.parserLexer.lexer.LexerP1;
import com.example.practica1.parserLexer.chartCode.*;
import com.example.practica1.parserLexer.attributes.*;
import com.example.practica1.parserLexer.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserP1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserP1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserP1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserP1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\004\007\000\002\004\007\000\002\005\005\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\005\000\002\012" +
    "\005\000\002\024\005\000\002\025\005\000\002\025\003" +
    "\000\002\013\005\000\002\026\005\000\002\027\005\000" +
    "\002\027\003\000\002\014\007\000\002\030\005\000\002" +
    "\030\003\000\002\031\007\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\005\000\002\033\004\000\002\007\005\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\015\005\000\002\016\005\000" +
    "\002\017\005\000\002\023\003\000\002\023\003\000\002" +
    "\020\005\000\002\021\005\000\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\024\004\042\007\001\002\000\006\025" +
    "\021\026\022\001\002\000\010\002\ufffe\024\004\042\007" +
    "\001\002\000\004\002\017\001\002\000\004\013\012\001" +
    "\002\000\010\002\ufffd\024\004\042\007\001\002\000\004" +
    "\002\uffff\001\002\000\004\015\013\001\002\000\004\014" +
    "\014\001\002\000\004\004\015\001\002\000\034\002\ufffc" +
    "\010\ufffc\024\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\042\ufffc\001\002" +
    "\000\010\002\uffcc\024\uffcc\042\uffcc\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\007\136" +
    "\001\002\000\004\007\023\001\002\000\020\027\026\032" +
    "\040\033\041\034\033\035\035\036\043\037\031\001\002" +
    "\000\004\004\uffd8\001\002\000\004\004\015\001\002\000" +
    "\004\005\132\001\002\000\004\004\uffda\001\002\000\004" +
    "\004\uffd4\001\002\000\004\005\130\001\002\000\004\010" +
    "\127\001\002\000\004\005\117\001\002\000\004\004\uffd9" +
    "\001\002\000\004\005\113\001\002\000\004\004\uffd5\001" +
    "\002\000\004\004\uffd6\001\002\000\004\005\056\001\002" +
    "\000\004\005\046\001\002\000\004\004\uffd7\001\002\000" +
    "\004\005\044\001\002\000\004\015\045\001\002\000\004" +
    "\004\uffcd\001\002\000\004\011\047\001\002\000\004\015" +
    "\051\001\002\000\004\004\uffd3\001\002\000\006\006\054" +
    "\012\uffef\001\002\000\004\012\053\001\002\000\004\004" +
    "\ufff1\001\002\000\004\015\051\001\002\000\004\012\ufff0" +
    "\001\002\000\004\011\057\001\002\000\004\007\060\001" +
    "\002\000\012\013\073\017\072\022\066\023\074\001\002" +
    "\000\004\012\065\001\002\000\006\006\063\012\uffe8\001" +
    "\002\000\004\007\060\001\002\000\004\012\uffe9\001\002" +
    "\000\004\004\uffea\001\002\000\024\004\uffe0\006\uffe0\010" +
    "\uffe0\012\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\001\002\000\010\006\110\016\077\017\100\001\002\000" +
    "\024\004\uffe1\006\uffe1\010\uffe1\012\uffe1\014\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\001\002\000\024\004\uffe4\006" +
    "\uffe4\010\uffe4\012\uffe4\014\uffe4\016\uffe4\017\uffe4\020\102" +
    "\021\103\001\002\000\012\013\073\017\072\022\066\023" +
    "\074\001\002\000\012\013\073\017\072\022\066\023\074" +
    "\001\002\000\024\004\uffdf\006\uffdf\010\uffdf\012\uffdf\014" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\001\002\000\010" +
    "\014\076\016\077\017\100\001\002\000\024\004\uffde\006" +
    "\uffde\010\uffde\012\uffde\014\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\001\002\000\012\013\073\017\072\022\066\023" +
    "\074\001\002\000\012\013\073\017\072\022\066\023\074" +
    "\001\002\000\024\004\uffe5\006\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\016\uffe5\017\uffe5\020\102\021\103\001\002\000\012" +
    "\013\073\017\072\022\066\023\074\001\002\000\012\013" +
    "\073\017\072\022\066\023\074\001\002\000\024\004\uffe3" +
    "\006\uffe3\010\uffe3\012\uffe3\014\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\001\002\000\024\004\uffe2\006\uffe2\010\uffe2" +
    "\012\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\001" +
    "\002\000\024\004\uffe6\006\uffe6\010\uffe6\012\uffe6\014\uffe6" +
    "\016\uffe6\017\uffe6\020\102\021\103\001\002\000\024\004" +
    "\uffdd\006\uffdd\010\uffdd\012\uffdd\014\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\001\002\000\012\013\073\017\072\022" +
    "\066\023\074\001\002\000\010\010\112\016\077\017\100" +
    "\001\002\000\006\006\uffe7\012\uffe7\001\002\000\006\040" +
    "\114\041\115\001\002\000\004\004\uffd0\001\002\000\004" +
    "\004\uffcf\001\002\000\004\004\uffd1\001\002\000\004\011" +
    "\121\001\002\000\004\004\uffd2\001\002\000\012\013\073" +
    "\017\072\022\066\023\074\001\002\000\012\006\125\012" +
    "\uffeb\016\077\017\100\001\002\000\004\012\124\001\002" +
    "\000\004\004\uffed\001\002\000\012\013\073\017\072\022" +
    "\066\023\074\001\002\000\004\012\uffec\001\002\000\010" +
    "\002\ufffa\024\ufffa\042\ufffa\001\002\000\012\013\073\017" +
    "\072\022\066\023\074\001\002\000\010\004\uffce\016\077" +
    "\017\100\001\002\000\004\015\133\001\002\000\004\004" +
    "\ufff3\001\002\000\022\010\uffdb\027\026\032\040\033\041" +
    "\034\033\035\035\036\043\037\031\001\002\000\004\010" +
    "\uffdc\001\002\000\012\027\026\030\141\031\137\032\040" +
    "\001\002\000\004\005\154\001\002\000\004\004\ufff7\001" +
    "\002\000\004\005\152\001\002\000\004\004\015\001\002" +
    "\000\004\004\ufff5\001\002\000\004\004\ufff6\001\002\000" +
    "\004\010\147\001\002\000\004\004\ufff4\001\002\000\010" +
    "\002\ufffb\024\ufffb\042\ufffb\001\002\000\014\010\ufff8\027" +
    "\026\030\141\031\137\032\040\001\002\000\004\010\ufff9" +
    "\001\002\000\004\011\047\001\002\000\004\004\ufff2\001" +
    "\002\000\004\011\121\001\002\000\004\004\uffee\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\010\002\005\004\004\022\007\001\001\000" +
    "\002\001\001\000\010\002\017\004\004\022\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\010\004" +
    "\004\022\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\031\010" +
    "\024\011\026\014\041\015\033\016\023\017\036\020\035" +
    "\021\027\001\001\000\002\001\001\000\004\003\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\047\001\001\000\004\025\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\060\031\061\001\001\000\010" +
    "\032\066\033\067\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\063\031\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\106" +
    "\001\001\000\010\032\074\033\067\034\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\067\034\105\001\001\000\006\033\067\034\100\001" +
    "\001\000\002\001\001\000\004\033\104\001\001\000\004" +
    "\033\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\110\033\067" +
    "\034\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\117\001\001\000\002\001" +
    "\001\000\012\027\122\032\121\033\067\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\125\032\121\033\067\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\130\033\067\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\134\010\024\011\026\014\041\015" +
    "\033\016\023\017\036\020\035\021\027\001\001\000\002" +
    "\001\001\000\016\005\144\006\141\011\137\012\143\013" +
    "\142\014\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\150\006\141\011\137\012" +
    "\143\013\142\014\145\001\001\000\002\001\001\000\004" +
    "\024\152\001\001\000\002\001\001\000\004\026\154\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserP1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserP1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserP1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ParserP1(LexerP1 lexer){
        super(lexer);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserP1$actions {
  private final ParserP1 parser;

  /** Constructor */
  CUP$ParserP1$actions(ParserP1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserP1$do_action_part00000000(
    int                        CUP$ParserP1$act_num,
    java_cup.runtime.lr_parser CUP$ParserP1$parser,
    java.util.Stack            CUP$ParserP1$stack,
    int                        CUP$ParserP1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserP1$result;

      /* select the action based on the action number */
      switch (CUP$ParserP1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= chart s 
            {
              Object RESULT =null;
		int chtleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int chtright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ChartCode cht = (ChartCode)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            if(cht != null) Execute.getExecute().addChart(cht);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		RESULT = start_val;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserP1$parser.done_parsing();
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= execute s 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            if(ex != null) Execute.getExecute().addExecuteCall(ex);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= chart 
            {
              Object RESULT =null;
		int chtleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int chtright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ChartCode cht = (ChartCode)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            if(cht != null) Execute.getExecute().addChart(cht);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= execute 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            if(ex != null) Execute.getExecute().addExecuteCall(ex);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fin ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("fin",1, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // chart ::= DEF BARRAS LBRACE cuerpo_barras RBRACE 
            {
              ChartCode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            BarChartCode chart = Validate.validateBar(arr);
                            RESULT = chart;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("chart",2, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // chart ::= DEF PIE LBRACE cuerpo_pie RBRACE 
            {
              ChartCode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            PieChartCode chart = Validate.validatePie(arr);
                            RESULT = chart;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("chart",2, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_barras ::= statement_barras fin cuerpo_barras 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            arr.add(att);
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_barras",3, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_barras ::= statement_barras fin 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            ArrayList<Attribute> attributes = new ArrayList<>();
                            attributes.add(att);
                            RESULT = attributes;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_barras",3, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_barras ::= titulo 
            {
              Attribute RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> ti = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ti;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_barras ::= ejex 
            {
              Attribute RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<String>> ex = (Attribute<ArrayNode<String>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ex;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_barras ::= ejey 
            {
              Attribute RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation>> ey = (Attribute<ArrayNode<Operation>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ey;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement_barras ::= unir 
            {
              Attribute RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation[]>> u = (Attribute<ArrayNode<Operation[]>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = u;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // titulo ::= TITULO COLON STRING 
            {
              Attribute<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                          st = st.replaceAll("\"", "");
                          Attribute<String> att = new Attribute<>(st, Attribute.TITULO, stleft);
                          RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("titulo",7, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ejex ::= EJEX COLON array_strings 
            {
              Attribute<ArrayNode<String>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<String> arr = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<ArrayNode<String>> att = new Attribute<>(arr, Attribute.EJEX, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("ejex",8, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // array_strings ::= LBRACKET strings_comma RBRACKET 
            {
              ArrayNode<String> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayNode<String> arr = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("array_strings",18, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // strings_comma ::= STRING COMMA strings_comma 
            {
              ArrayNode<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int nextsleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int nextsright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<String> nexts = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            st = st.replaceAll("\"", "");
                            ArrayNode<String> node = new ArrayNode<String>(st);
                            node.setNext(nexts);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("strings_comma",19, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // strings_comma ::= STRING 
            {
              ArrayNode<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            st = st.replaceAll("\"", "");
                            ArrayNode<String> node = new ArrayNode<String>(st);                            
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("strings_comma",19, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ejey ::= EJEY COLON array_operations 
            {
              Attribute<ArrayNode<Operation>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation> arr = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Attribute<ArrayNode<Operation>> att = new Attribute<>(arr, Attribute.EJEY, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("ejey",9, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // array_operations ::= LBRACKET operations_comma RBRACKET 
            {
              ArrayNode<Operation> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayNode<Operation> arr = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("array_operations",20, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operations_comma ::= operation COMMA operations_comma 
            {
              ArrayNode<Operation> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int nextsleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int nextsright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation> nexts = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            ArrayNode<Operation> node = new ArrayNode<Operation>(o);
                            node.setNext(nexts);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operations_comma",21, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operations_comma ::= operation 
            {
              ArrayNode<Operation> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            ArrayNode<Operation> node = new ArrayNode<Operation>(o);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operations_comma",21, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unir ::= UNIR COLON LBRACKET tuplas_comma RBRACKET 
            {
              Attribute<ArrayNode<Operation[]>> RESULT =null;
		int tuplasleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int tuplasright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayNode<Operation[]> tuplas = (ArrayNode<Operation[]>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                           Attribute<ArrayNode<Operation[]>> att = new Attribute<>(tuplas, Attribute.UNIR, tuplasleft);
                           RESULT = att;                           
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("unir",10, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tuplas_comma ::= tupla COMMA tuplas_comma 
            {
              ArrayNode<Operation[]> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation[] tp = (Operation[])((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int prevsleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int prevsright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation[]> prevs = (ArrayNode<Operation[]>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            ArrayNode<Operation[]> node = new ArrayNode<Operation[]>(tp);
                            node.setNext(prevs);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tuplas_comma",22, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tuplas_comma ::= tupla 
            {
              ArrayNode<Operation[]> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation[] tp = (Operation[])((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            ArrayNode<Operation[]> node = new ArrayNode<Operation[]>(tp);                            
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tuplas_comma",22, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tupla ::= LBRACE operation COMMA operation RBRACE 
            {
              Operation[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-3)).right;
		Operation x = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Operation y = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		 
                            Operation[] array = new Operation[2];
                            array[0] = x;
                            array[1] = y;
                            RESULT = array;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tupla",23, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= operation PLUS term 
            {
              Operation RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.SUMA);
                            RESULT=new Operation("+", o, t);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operation",24, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation ::= operation MINUS term 
            {
              Operation RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.RESTA);
                            RESULT=new Operation("-", o, t);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operation",24, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operation ::= term 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		RESULT=t;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operation",24, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term TIMES factor 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.MULTIPLICACION);
                            RESULT=new Operation("*", t, f);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term DIVISION factor 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.DIVISION);
                            RESULT=new Operation("/", t, f);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= factor 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 RESULT=f;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= INTEGER 
            {
              Operation RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 RESULT=new Operation("n", val);
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= DECIMAL 
            {
              Operation RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 RESULT=new Operation("n", val);
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= LPAREN operation RPAREN 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		 RESULT=op;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= MINUS factor 
            {
              Operation RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.RESTA);
                            RESULT=new Operation("minus", op, null);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo_pie ::= statement_pie fin cuerpo_pie 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		                           
                            arr.add(att);
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_pie",5, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_pie ::= statement_pie fin 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            ArrayList<Attribute> attributes = new ArrayList<>();
                            attributes.add(att);
                            RESULT = attributes;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_pie",5, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_pie ::= titulo 
            {
              Attribute RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> ti = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ti;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_pie ::= etiquetas 
            {
              Attribute RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<String>> et = (Attribute<ArrayNode<String>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = et;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_pie ::= valores 
            {
              Attribute RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation>> va = (Attribute<ArrayNode<Operation>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = va;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_pie ::= unir 
            {
              Attribute RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation[]>> u = (Attribute<ArrayNode<Operation[]>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = u;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_pie ::= tipo 
            {
              Attribute RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> tp = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = tp;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement_pie ::= total 
            {
              Attribute RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<Operation> to = (Attribute<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = to;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_pie ::= extra 
            {
              Attribute RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> ex = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ex;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas ::= ETIQUETAS COLON array_strings 
            {
              Attribute<ArrayNode<String>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<String> arr = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<ArrayNode<String>> att = new Attribute<>(arr, Attribute.ETIQUETAS, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("etiquetas",11, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valores ::= VALORES COLON array_operations 
            {
              Attribute<ArrayNode<Operation>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation> arr = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<ArrayNode<Operation>> att = new Attribute<>(arr, Attribute.VALORES, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= TIPO COLON pie_types 
            {
              Attribute<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<String> att = new Attribute<>(st, Attribute.TIPO, stleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pie_types ::= CANTIDAD 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = st;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("pie_types",17, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pie_types ::= PORCENTAJE 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = st;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("pie_types",17, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // total ::= TOTAL COLON operation 
            {
              Attribute<Operation> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<Operation> att = new Attribute<>(op, Attribute.TOTAL, opleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("total",14, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // extra ::= EXTRA COLON STRING 
            {
              Attribute<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            st = st.replaceAll("\"", "");
                            Attribute<String> att = new Attribute<>(st, Attribute.EXTRA, stleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // execute ::= EJECUTAR LPAREN STRING RPAREN fin 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		
                            st = st.replaceAll("\"", "");                            
                            RESULT = st;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("execute",16, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserP1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserP1$do_action(
    int                        CUP$ParserP1$act_num,
    java_cup.runtime.lr_parser CUP$ParserP1$parser,
    java.util.Stack            CUP$ParserP1$stack,
    int                        CUP$ParserP1$top)
    throws java.lang.Exception
    {
              return CUP$ParserP1$do_action_part00000000(
                               CUP$ParserP1$act_num,
                               CUP$ParserP1$parser,
                               CUP$ParserP1$stack,
                               CUP$ParserP1$top);
    }
}

}
