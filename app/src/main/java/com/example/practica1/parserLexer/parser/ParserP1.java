
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1.parserLexer.parser;

import com.example.practica1.parserLexer.lexer.LexerP1;
import com.example.practica1.parserLexer.chartCode.*;
import com.example.practica1.parserLexer.attributes.*;
import com.example.practica1.parserLexer.*;
import com.example.practica1.parserLexer.Errors.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserP1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserP1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserP1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserP1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\011\005" +
    "\000\002\011\005\000\002\012\005\000\002\024\005\000" +
    "\002\025\005\000\002\025\003\000\002\013\005\000\002" +
    "\013\005\000\002\026\005\000\002\027\005\000\002\027" +
    "\003\000\002\014\007\000\002\014\005\000\002\030\005" +
    "\000\002\030\003\000\002\030\005\000\002\031\007\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\033\004" +
    "\000\002\007\005\000\002\007\004\000\002\007\005\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\015\005\000\002\015\005" +
    "\000\002\016\005\000\002\016\005\000\002\017\005\000" +
    "\002\017\005\000\002\023\003\000\002\023\003\000\002" +
    "\020\005\000\002\020\005\000\002\021\005\000\002\021" +
    "\005\000\002\022\007\000\002\022\007\000\002\022\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\024\004\043\007\001\002\000\006\025" +
    "\025\026\026\001\002\000\010\002\ufffe\024\004\043\007" +
    "\001\002\000\004\002\023\001\002\000\004\013\012\001" +
    "\002\000\010\002\ufffd\024\004\043\007\001\002\000\004" +
    "\002\uffff\001\002\000\006\003\014\015\013\001\002\000" +
    "\004\014\020\001\002\000\004\014\015\001\002\000\004" +
    "\004\016\001\002\000\034\002\ufffc\010\ufffc\024\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\043\ufffc\001\002\000\010\002\uffbc\024" +
    "\uffbc\043\uffbc\001\002\000\006\003\021\004\016\001\002" +
    "\000\010\002\uffbb\024\uffbb\043\uffbb\001\002\000\010\002" +
    "\uffbd\024\uffbd\043\uffbd\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\157\001\002\000" +
    "\004\007\027\001\002\000\022\003\041\027\031\032\045" +
    "\033\046\034\037\035\042\036\050\037\035\001\002\000" +
    "\006\003\uffce\004\uffce\001\002\000\004\005\154\001\002" +
    "\000\006\003\150\004\016\001\002\000\006\003\uffd0\004" +
    "\uffd0\001\002\000\006\003\uffca\004\uffca\001\002\000\004" +
    "\005\145\001\002\000\004\010\144\001\002\000\004\005" +
    "\133\001\002\000\006\003\uffcf\004\uffcf\001\002\000\004" +
    "\010\132\001\002\000\004\005\125\001\002\000\006\003" +
    "\uffcb\004\uffcb\001\002\000\006\003\uffcc\004\uffcc\001\002" +
    "\000\004\005\065\001\002\000\004\005\054\001\002\000" +
    "\006\003\uffcd\004\uffcd\001\002\000\004\005\051\001\002" +
    "\000\006\003\053\015\052\001\002\000\006\003\uffbf\004" +
    "\uffbf\001\002\000\006\003\uffbe\004\uffbe\001\002\000\006" +
    "\003\055\011\057\001\002\000\006\003\uffc8\004\uffc8\001" +
    "\002\000\006\003\uffc9\004\uffc9\001\002\000\004\015\060" +
    "\001\002\000\006\006\063\012\uffea\001\002\000\004\012" +
    "\062\001\002\000\006\003\uffec\004\uffec\001\002\000\004" +
    "\015\060\001\002\000\004\012\uffeb\001\002\000\006\003" +
    "\066\011\067\001\002\000\006\003\uffe3\004\uffe3\001\002" +
    "\000\004\007\070\001\002\000\012\013\105\017\104\022" +
    "\100\023\106\001\002\000\004\012\077\001\002\000\010" +
    "\003\074\006\073\012\uffe1\001\002\000\004\007\070\001" +
    "\002\000\004\007\070\001\002\000\004\012\uffe0\001\002" +
    "\000\004\012\uffe2\001\002\000\006\003\uffe4\004\uffe4\001" +
    "\002\000\026\003\uffd8\004\uffd8\006\uffd8\010\uffd8\012\uffd8" +
    "\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\001\002\000" +
    "\010\006\122\016\111\017\112\001\002\000\026\003\uffdc" +
    "\004\uffdc\006\uffdc\010\uffdc\012\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\020\114\021\115\001\002\000\026\003\uffd9\004\uffd9" +
    "\006\uffd9\010\uffd9\012\uffd9\014\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\001\002\000\012\013\105\017\104\022\100" +
    "\023\106\001\002\000\012\013\105\017\104\022\100\023" +
    "\106\001\002\000\026\003\uffd7\004\uffd7\006\uffd7\010\uffd7" +
    "\012\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\001" +
    "\002\000\010\014\110\016\111\017\112\001\002\000\026" +
    "\003\uffd6\004\uffd6\006\uffd6\010\uffd6\012\uffd6\014\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\001\002\000\012\013\105" +
    "\017\104\022\100\023\106\001\002\000\012\013\105\017" +
    "\104\022\100\023\106\001\002\000\026\003\uffdd\004\uffdd" +
    "\006\uffdd\010\uffdd\012\uffdd\014\uffdd\016\uffdd\017\uffdd\020" +
    "\114\021\115\001\002\000\012\013\105\017\104\022\100" +
    "\023\106\001\002\000\012\013\105\017\104\022\100\023" +
    "\106\001\002\000\026\003\uffdb\004\uffdb\006\uffdb\010\uffdb" +
    "\012\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\001" +
    "\002\000\026\003\uffda\004\uffda\006\uffda\010\uffda\012\uffda" +
    "\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\001\002\000" +
    "\026\003\uffde\004\uffde\006\uffde\010\uffde\012\uffde\014\uffde" +
    "\016\uffde\017\uffde\020\114\021\115\001\002\000\026\003" +
    "\uffd5\004\uffd5\006\uffd5\010\uffd5\012\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\001\002\000\012\013\105\017" +
    "\104\022\100\023\106\001\002\000\010\010\124\016\111" +
    "\017\112\001\002\000\010\003\uffdf\006\uffdf\012\uffdf\001" +
    "\002\000\010\003\127\040\126\041\131\001\002\000\006" +
    "\003\uffc3\004\uffc3\001\002\000\006\003\uffc4\004\uffc4\001" +
    "\002\000\006\003\uffc5\004\uffc5\001\002\000\006\003\uffc2" +
    "\004\uffc2\001\002\000\010\002\ufff8\024\ufff8\043\ufff8\001" +
    "\002\000\006\003\134\011\136\001\002\000\006\003\uffc6" +
    "\004\uffc6\001\002\000\006\003\uffc7\004\uffc7\001\002\000" +
    "\012\013\105\017\104\022\100\023\106\001\002\000\012" +
    "\006\142\012\uffe5\016\111\017\112\001\002\000\004\012" +
    "\141\001\002\000\006\003\uffe7\004\uffe7\001\002\000\012" +
    "\013\105\017\104\022\100\023\106\001\002\000\004\012" +
    "\uffe6\001\002\000\010\002\ufffa\024\ufffa\043\ufffa\001\002" +
    "\000\014\003\147\013\105\017\104\022\100\023\106\001" +
    "\002\000\012\003\uffc1\004\uffc1\016\111\017\112\001\002" +
    "\000\006\003\uffc0\004\uffc0\001\002\000\022\010\uffd1\027" +
    "\031\032\045\033\046\034\037\035\042\036\050\037\035" +
    "\001\002\000\022\010\uffd3\027\031\032\045\033\046\034" +
    "\037\035\042\036\050\037\035\001\002\000\004\010\uffd4" +
    "\001\002\000\004\010\uffd2\001\002\000\006\003\156\015" +
    "\155\001\002\000\006\003\uffef\004\uffef\001\002\000\006" +
    "\003\uffee\004\uffee\001\002\000\014\003\167\027\031\030" +
    "\162\031\160\032\045\001\002\000\004\005\201\001\002" +
    "\000\006\003\ufff3\004\ufff3\001\002\000\004\005\177\001" +
    "\002\000\006\003\173\004\016\001\002\000\006\003\ufff1" +
    "\004\ufff1\001\002\000\006\003\ufff2\004\ufff2\001\002\000" +
    "\004\010\172\001\002\000\004\010\171\001\002\000\006" +
    "\003\ufff0\004\ufff0\001\002\000\010\002\ufff9\024\ufff9\043" +
    "\ufff9\001\002\000\010\002\ufffb\024\ufffb\043\ufffb\001\002" +
    "\000\014\010\ufff4\027\031\030\162\031\160\032\045\001" +
    "\002\000\014\010\ufff6\027\031\030\162\031\160\032\045" +
    "\001\002\000\004\010\ufff7\001\002\000\004\010\ufff5\001" +
    "\002\000\004\011\057\001\002\000\006\003\uffed\004\uffed" +
    "\001\002\000\006\003\202\011\136\001\002\000\006\003" +
    "\uffe8\004\uffe8\001\002\000\006\003\uffe9\004\uffe9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\002\005\004\004\022\007\001\001\000" +
    "\002\001\001\000\010\002\023\004\004\022\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\010\004" +
    "\004\022\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\035\010\031\011\032\014\046\015\037\016" +
    "\027\017\043\020\042\021\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\070\031\071\001\001\000\010\032\100\033\102\034" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\075\031\071\001\001\000\006\030\074\031\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\120\001\001\000\010\032\106" +
    "\033\102\034\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\102\034\117\001\001" +
    "\000\006\033\102\034\112\001\001\000\002\001\001\000" +
    "\004\033\116\001\001\000\004\033\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\122\033\102\034\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\137\032\136" +
    "\033\102\034\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\142\032\136\033\102" +
    "\034\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\145\033\102\034\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\152\010\031\011\032\014" +
    "\046\015\037\016\027\017\043\020\042\021\033\001\001" +
    "\000\024\007\151\010\031\011\032\014\046\015\037\016" +
    "\027\017\043\020\042\021\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\165\006\162\011\160\012\164" +
    "\013\163\014\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\175\006\162\011\160\012\164\013\163\014" +
    "\167\001\001\000\016\005\174\006\162\011\160\012\164" +
    "\013\163\014\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\177\001\001\000\002\001\001\000\004" +
    "\026\202\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserP1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserP1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserP1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ParserP1(LexerP1 lexer){
        super(lexer);
    }


    public void syntax_error(Symbol cur_token) {
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
		List<Integer> tokens = expected_token_ids();
        int line = cur_token.left;
        int column = cur_token.right;
        String lexeme = cur_token.value.toString();
		int type = Errors.SINTAX;
        String des = "Se esperaba: ";
		for(Integer i : tokens) {	
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                des += fromId +" o ";
            }			
		}
        des = des.substring(0, des.length() - 3);
        Errors.getErrors().addLS(line, column, des, lexeme, type);
	}

    public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserP1$actions {
  private final ParserP1 parser;

  /** Constructor */
  CUP$ParserP1$actions(ParserP1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserP1$do_action_part00000000(
    int                        CUP$ParserP1$act_num,
    java_cup.runtime.lr_parser CUP$ParserP1$parser,
    java.util.Stack            CUP$ParserP1$stack,
    int                        CUP$ParserP1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserP1$result;

      /* select the action based on the action number */
      switch (CUP$ParserP1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= chart s 
            {
              Object RESULT =null;
		int chtleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int chtright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ChartCode cht = (ChartCode)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            if(cht != null) Execute.getExecute().addChart(cht);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		RESULT = start_val;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserP1$parser.done_parsing();
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= execute s 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            if(ex != null) Execute.getExecute().addExecuteCall(ex);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= chart 
            {
              Object RESULT =null;
		int chtleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int chtright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ChartCode cht = (ChartCode)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            if(cht != null) Execute.getExecute().addChart(cht);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= execute 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            if(ex != null) Execute.getExecute().addExecuteCall(ex);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fin ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("fin",1, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // chart ::= DEF BARRAS LBRACE cuerpo_barras RBRACE 
            {
              ChartCode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            BarChartCode chart = Validate.validateBar(arr);
                            RESULT = chart;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("chart",2, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // chart ::= DEF PIE LBRACE cuerpo_pie RBRACE 
            {
              ChartCode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            PieChartCode chart = Validate.validatePie(arr);
                            RESULT = chart;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("chart",2, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // chart ::= DEF BARRAS LBRACE error RBRACE 
            {
              ChartCode RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("chart",2, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // chart ::= DEF PIE LBRACE error RBRACE 
            {
              ChartCode RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("chart",2, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_barras ::= statement_barras fin cuerpo_barras 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            arr.add(att);
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_barras",3, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_barras ::= statement_barras fin 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            ArrayList<Attribute> attributes = new ArrayList<>();
                            attributes.add(att);
                            RESULT = attributes;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_barras",3, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_barras ::= statement_barras error cuerpo_barras 
            {
              ArrayList<Attribute> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_barras",3, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_barras ::= statement_barras error 
            {
              ArrayList<Attribute> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_barras",3, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement_barras ::= titulo 
            {
              Attribute RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> ti = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ti;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement_barras ::= ejex 
            {
              Attribute RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<String>> ex = (Attribute<ArrayNode<String>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ex;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement_barras ::= ejey 
            {
              Attribute RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation>> ey = (Attribute<ArrayNode<Operation>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ey;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_barras ::= unir 
            {
              Attribute RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation[]>> u = (Attribute<ArrayNode<Operation[]>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = u;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_barras",4, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // titulo ::= TITULO COLON STRING 
            {
              Attribute<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                          st = st.replaceAll("\"", "");
                          Attribute<String> att = new Attribute<>(st, Attribute.TITULO, stleft);
                          RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("titulo",7, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // titulo ::= TITULO COLON error 
            {
              Attribute<String> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("titulo",7, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ejex ::= EJEX COLON array_strings 
            {
              Attribute<ArrayNode<String>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<String> arr = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<ArrayNode<String>> att = new Attribute<>(arr, Attribute.EJEX, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("ejex",8, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array_strings ::= LBRACKET strings_comma RBRACKET 
            {
              ArrayNode<String> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayNode<String> arr = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("array_strings",18, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // strings_comma ::= STRING COMMA strings_comma 
            {
              ArrayNode<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int nextsleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int nextsright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<String> nexts = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            st = st.replaceAll("\"", "");
                            ArrayNode<String> node = new ArrayNode<String>(st);
                            node.setNext(nexts);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("strings_comma",19, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // strings_comma ::= STRING 
            {
              ArrayNode<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            st = st.replaceAll("\"", "");
                            ArrayNode<String> node = new ArrayNode<String>(st);                            
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("strings_comma",19, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ejey ::= EJEY COLON array_operations 
            {
              Attribute<ArrayNode<Operation>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation> arr = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Attribute<ArrayNode<Operation>> att = new Attribute<>(arr, Attribute.EJEY, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("ejey",9, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ejey ::= EJEY COLON error 
            {
              Attribute<ArrayNode<Operation>> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("ejey",9, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_operations ::= LBRACKET operations_comma RBRACKET 
            {
              ArrayNode<Operation> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayNode<Operation> arr = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("array_operations",20, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operations_comma ::= operation COMMA operations_comma 
            {
              ArrayNode<Operation> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int nextsleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int nextsright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation> nexts = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            ArrayNode<Operation> node = new ArrayNode<Operation>(o);
                            node.setNext(nexts);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operations_comma",21, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operations_comma ::= operation 
            {
              ArrayNode<Operation> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            ArrayNode<Operation> node = new ArrayNode<Operation>(o);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operations_comma",21, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unir ::= UNIR COLON LBRACKET tuplas_comma RBRACKET 
            {
              Attribute<ArrayNode<Operation[]>> RESULT =null;
		int tuplasleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int tuplasright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		ArrayNode<Operation[]> tuplas = (ArrayNode<Operation[]>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                           Attribute<ArrayNode<Operation[]>> att = new Attribute<>(tuplas, Attribute.UNIR, tuplasleft);
                           RESULT = att;                           
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("unir",10, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unir ::= UNIR COLON error 
            {
              Attribute<ArrayNode<Operation[]>> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("unir",10, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tuplas_comma ::= tupla COMMA tuplas_comma 
            {
              ArrayNode<Operation[]> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation[] tp = (Operation[])((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int prevsleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int prevsright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation[]> prevs = (ArrayNode<Operation[]>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            ArrayNode<Operation[]> node = new ArrayNode<Operation[]>(tp);
                            node.setNext(prevs);
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tuplas_comma",22, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tuplas_comma ::= tupla 
            {
              ArrayNode<Operation[]> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation[] tp = (Operation[])((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            ArrayNode<Operation[]> node = new ArrayNode<Operation[]>(tp);                            
                            RESULT = node;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tuplas_comma",22, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tuplas_comma ::= tupla error tuplas_comma 
            {
              ArrayNode<Operation[]> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tuplas_comma",22, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tupla ::= LBRACE operation COMMA operation RBRACE 
            {
              Operation[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-3)).right;
		Operation x = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Operation y = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		 
                            Operation[] array = new Operation[2];
                            array[0] = x;
                            array[1] = y;
                            RESULT = array;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tupla",23, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= operation PLUS term 
            {
              Operation RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.SUMA);
                            RESULT=new Operation("+", o, t);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operation",24, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= operation MINUS term 
            {
              Operation RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation o = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.RESTA);
                            RESULT=new Operation("-", o, t);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operation",24, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= term 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		RESULT=t;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("operation",24, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= term TIMES factor 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.MULTIPLICACION);
                            RESULT=new Operation("*", t, f);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term DIVISION factor 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Operation t = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.DIVISION);
                            RESULT=new Operation("/", t, f);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= factor 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 RESULT=f;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= INTEGER 
            {
              Operation RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 RESULT=new Operation("n", val);
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= DECIMAL 
            {
              Operation RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 RESULT=new Operation("n", val);
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= LPAREN operation RPAREN 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		 RESULT=op;
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= MINUS factor 
            {
              Operation RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		 
                            Execute.getExecute().addMathSymbol(smleft, smright, MathSymbol.RESTA);
                            RESULT=new Operation("minus", op, null);
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo_pie ::= statement_pie fin cuerpo_pie 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayList<Attribute> arr = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		                           
                            arr.add(att);
                            RESULT = arr;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_pie",5, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_pie ::= statement_pie fin 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)).value;
		
                            ArrayList<Attribute> attributes = new ArrayList<>();
                            attributes.add(att);
                            RESULT = attributes;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_pie",5, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo_pie ::= statement_pie error cuerpo_pie 
            {
              ArrayList<Attribute> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_pie",5, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo_pie ::= statement_pie error 
            {
              ArrayList<Attribute> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("cuerpo_pie",5, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_pie ::= titulo 
            {
              Attribute RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> ti = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ti;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_pie ::= etiquetas 
            {
              Attribute RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<String>> et = (Attribute<ArrayNode<String>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = et;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_pie ::= valores 
            {
              Attribute RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation>> va = (Attribute<ArrayNode<Operation>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = va;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_pie ::= unir 
            {
              Attribute RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<ArrayNode<Operation[]>> u = (Attribute<ArrayNode<Operation[]>>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = u;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_pie ::= tipo 
            {
              Attribute RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> tp = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = tp;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement_pie ::= total 
            {
              Attribute RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<Operation> to = (Attribute<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = to;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement_pie ::= extra 
            {
              Attribute RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Attribute<String> ex = (Attribute<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = ex;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("statement_pie",6, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // etiquetas ::= ETIQUETAS COLON array_strings 
            {
              Attribute<ArrayNode<String>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<String> arr = (ArrayNode<String>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<ArrayNode<String>> att = new Attribute<>(arr, Attribute.ETIQUETAS, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("etiquetas",11, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // etiquetas ::= ETIQUETAS COLON error 
            {
              Attribute<ArrayNode<String>> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("etiquetas",11, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valores ::= VALORES COLON array_operations 
            {
              Attribute<ArrayNode<Operation>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		ArrayNode<Operation> arr = (ArrayNode<Operation>)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<ArrayNode<Operation>> att = new Attribute<>(arr, Attribute.VALORES, arrleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valores ::= VALORES COLON error 
            {
              Attribute<ArrayNode<Operation>> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= TIPO COLON pie_types 
            {
              Attribute<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<String> att = new Attribute<>(st, Attribute.TIPO, stleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= TIPO COLON error 
            {
              Attribute<String> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pie_types ::= CANTIDAD 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = st;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("pie_types",17, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pie_types ::= PORCENTAJE 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            RESULT = st;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("pie_types",17, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // total ::= TOTAL COLON operation 
            {
              Attribute<Operation> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            Attribute<Operation> att = new Attribute<>(op, Attribute.TOTAL, opleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("total",14, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // total ::= TOTAL COLON error 
            {
              Attribute<Operation> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("total",14, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // extra ::= EXTRA COLON STRING 
            {
              Attribute<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.peek()).value;
		
                            st = st.replaceAll("\"", "");
                            Attribute<String> att = new Attribute<>(st, Attribute.EXTRA, stleft);
                            RESULT = att;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // extra ::= EXTRA COLON error 
            {
              Attribute<String> RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // execute ::= EJECUTAR LPAREN STRING RPAREN fin 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-2)).value;
		
                            st = st.replaceAll("\"", "");                            
                            RESULT = st;
                        
              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("execute",16, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // execute ::= EJECUTAR LPAREN error RPAREN fin 
            {
              String RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("execute",16, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // execute ::= EJECUTAR LPAREN STRING RPAREN error 
            {
              String RESULT =null;

              CUP$ParserP1$result = parser.getSymbolFactory().newSymbol("execute",16, ((java_cup.runtime.Symbol)CUP$ParserP1$stack.elementAt(CUP$ParserP1$top-4)), ((java_cup.runtime.Symbol)CUP$ParserP1$stack.peek()), RESULT);
            }
          return CUP$ParserP1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserP1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserP1$do_action(
    int                        CUP$ParserP1$act_num,
    java_cup.runtime.lr_parser CUP$ParserP1$parser,
    java.util.Stack            CUP$ParserP1$stack,
    int                        CUP$ParserP1$top)
    throws java.lang.Exception
    {
              return CUP$ParserP1$do_action_part00000000(
                               CUP$ParserP1$act_num,
                               CUP$ParserP1$parser,
                               CUP$ParserP1$stack,
                               CUP$ParserP1$top);
    }
}

}
